datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  forums        Forum[]
  posts         Post[]
  comments      Comment[]
  upvotes       Upvote[]
 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
 
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model Forum {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(255)
  tagline   String?  @db.VarChar(255)
  link      String
  logo      String?
  slug      String   @unique
  posts     Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, link])
}

model Post {
  id          String   @id @default(cuid())
  title       String
  description String
  slug        String   @unique
  upvote      Int      @default(0)
  comments    Comment[]
  upvotes     Upvote[]

  userId      String?  // Allow null for anonymous posts
  user        User?    @relation(fields: [userId], references: [id])

  forumId     String
  forum       Forum    @relation(fields: [forumId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text

  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId    String?  // Allow null for anonymous comments
  user      User?    @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Upvote {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}
